# 🐳 GitHub Action to build and publish a Docker image of the dbt project to the preprod environment (Artifact Registry)

name: Publish dbt project on preprod environment

# 📦 Trigger this workflow when code is pushed to the main branch (e.g., PR merged)
on:
  push:
    branches:
      - main
  workflow_dispatch:  # Manual trigger (optional)

# 🌍 Global environment variables
env:
  REGION: us                                      # GCP region (same as Artifact Registry)
  PROJECT_ID: ae-bootcamp-standupfree             # GCP project ID
  REPOSITORY: dbt-images-preprod                  # Artifact Registry repo name for preprod
  IMAGE_NAME: dbt-jaffle-shop                     # Docker image name

jobs:
  build-and-push-preprod:
    runs-on: ubuntu-latest

    steps:
      # 📥 Step 1: Checkout the source code with full history
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0           # Fetch all commits to calculate RC version properly
          ref: ${{ github.ref }}   # Ensure current branch is checked out

      # 🔐 Step 2: Authenticate to Google Cloud with service account
      - name: Set up Docker credentials
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
          export_environment_variables: true

      # ⚙️ Step 3: Configure Docker for Artifact Registry
      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: Read version from VERSION file
        id: read_version
        run: |
          BASE=$(cat VERSION)
          echo "next_version=$BASE" >> $GITHUB_OUTPUT

      # 🏷️ Step 4: Dynamically compute version tag for the Docker image
      # - Uses the tag entered in the VERSION file (e.g., 1.0.0-RC1)
      - name: Compute preprod version tag
        id: version
        run: |
          # Retrieve the preprod version from the VERSION file
          TAG=$(sed -n '2p' VERSION)

          # Output the tag for use in subsequent GitHub Action steps
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      # 🏗️ Step 5: Build the Docker image
      - name: Build Docker image
        run: |
          docker build -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.tag }} .

      # 🚀 Step 6: Push the Docker image to Artifact Registry
      - name: Push Docker image
        run: |
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.tag }}
